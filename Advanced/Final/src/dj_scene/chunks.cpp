#include "../dj.h"
#include "chunks.h"
#include <map>
#include <vector>
#include <string>

chunk::chunk() {
	dim = 0;
	height = 0;
	blocks = std::vector<block>();
}

chunk::chunk(int d, int h) {
	dim = d;
	height = h;
	
	blocks = std::vector<block>();

	for(int x = 0; x < dim; ++x) {
		for(int y = 0; y < dim; ++y) {
			for(int z = 0; z < height; ++z) {
				block b = block(rand()%4);
				blocks.push_back(b);
			}
		}
	}
}

std::vector<float> chunk::flatPositionMap(){ // ((x,y,z),(x,y,z)) but flat...
	std::vector<float> list;
	for (int i = 0; i < dim; ++i) {
		for (int j = 0; j < dim; ++j) {
			for (int k = 0; k < height; ++k) {
				list.push_back(i);
				list.push_back(k);
				list.push_back(j); // Reversed x and y
			}
		}
	}
	
	return list;
}

std::vector<float> chunk::flatIDMap() {
	std::vector<float> list;
	dim = 8;
	height = 4;
	if (v_chunk_type == 0) { // random chunk
		for (unsigned int i = 0; i < blocks.size(); ++i) {
			float x = blocks[i].GetID();
			list.push_back(x);
			
		}
	} else if (v_chunk_type == 1) {
		float tmp[] = { 
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					0.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 0.0, 
					0.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 0.0, 
					0.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 0.0, 
					0.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 0.0, 
					0.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 0.0, 
					0.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 0.0, 
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					0.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 0.0, 
					0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 
					0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 
					0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 
					0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 
					0.0, 3.0, 3.0, 0.0, 0.0, 3.0, 3.0, 0.0, 
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					0.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 0.0, 
					0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 
					0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 
					0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 
					0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 
					0.0, 3.0, 3.0, 0.0, 0.0, 3.0, 3.0, 0.0, 
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					
					2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 
					2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 
					2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 
					2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 
					2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 
					2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 
					2.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 2.0, 
					2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 
					
				};
		list = std::vector<float>(tmp, tmp + sizeof(tmp) / sizeof(tmp[0]));
	} else if (v_chunk_type == 2) {
		float tmp[] = { 
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					0.0, 0.0, 0.0, 3.0, 3.0, 0.0, 0.0, 0.0, 
					0.0, 0.0, 0.0, 3.0, 3.0, 0.0, 0.0, 0.0, 
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 
					0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 
					0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 
					0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 
					0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 
					0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 
					0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 
					0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 
					0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 
					0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
					
					2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 
					2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 
					2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 
					2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 
					2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 
					2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 
					2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 
					2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 
					
				};
		list = std::vector<float>(tmp, tmp + sizeof(tmp) / sizeof(tmp[0]));
	} else {
		printf("Bad CHUNK Type\n");
	}
	
	return list;
}
